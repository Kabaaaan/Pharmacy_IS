import customtkinter as ctk
from datetime import datetime
from tkinter import messagebox
from .home import api
from openpyxl import Workbook
import os
import pathlib

class PrescriptionsPage(ctk.CTkFrame):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ ¬´–†–∞–±–æ—Ç–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏¬ª"""

    def __init__(self, parent, controller):
        super().__init__(parent, fg_color="#1a1a1a")
        self.controller = controller

        self._prescriptions_data = []
        self._medicines_list = []
        self._medicines_dict = {} 
        self.loading = False  

        self._setup_ui()
        self.load_medicines()
        self.refresh_prescriptions_list()

    def _setup_ui(self):
        # self._create_back_button()
        self._create_header()
        self._create_filters_panel()
        self._create_prescriptions_list()
        
    def _create_back_button(self):
        ctk.CTkButton(
            self,
            text="‚Üê –ù–∞–∑–∞–¥",
            width=100,
            height=36,
            fg_color="#333333",
            hover_color="#444444",
            border_color="#555555",
            border_width=1,
            text_color="white",
            font=ctk.CTkFont(size=14, weight="bold"),
            corner_radius=10,
            command=lambda: self.controller.show_page("HomePage")
        ).place(x=20, y=20)

    def _create_header(self):
        header_frame = ctk.CTkFrame(self, fg_color="transparent")
        header_frame.pack(pady=(20, 15), fill="x", padx=200)
        
        ctk.CTkLabel(
            header_frame,
            text="–†–∞–±–æ—Ç–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏",
            font=ctk.CTkFont(size=26, weight="bold", family="Arial"),
            text_color="#ffffff"
        ).pack(side="bottom")
        
    def _create_filters_panel(self):
        actions_panel = ctk.CTkFrame(
            self, 
            fg_color="#252525",
            corner_radius=14,
            border_width=1,
            border_color="#333333"
        )
        actions_panel.pack(fill="x", padx=20, pady=(0, 20))
        
        header_frame = ctk.CTkFrame(actions_panel, fg_color="transparent")
        header_frame.pack(fill="x", padx=15, pady=(10, 5))
        
        ctk.CTkLabel(
            header_frame,
            text="‚ö° –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#7a7a7a"
        ).pack(side="left")
        
        buttons_frame = ctk.CTkFrame(actions_panel, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=10, pady=(5, 10))
        
        btn_style = {
            "height": 40,
            "font": ctk.CTkFont(size=14, weight="bold"),
            "corner_radius": 8,
            "border_width": 1
        }
        
        self.btn_add = ctk.CTkButton(
            buttons_frame,
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç",
            fg_color="#2e8b57",
            hover_color="#3cb371",
            border_color="#3a7a50",
            text_color="white",
            command=self.open_add_modal,
            **btn_style
        )
        self.btn_add.pack(side="left", expand=True, fill="x", padx=(0, 10))
        
        self.btn_export = ctk.CTkButton(
            buttons_frame,
            text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel",
            fg_color="#4d8af0",
            hover_color="#3a7ae0",
            border_color="#3a5f8a",
            text_color="white",
            command=self.export_to_excel,
            **btn_style
        )
        self.btn_export.pack(side="left", expand=True, fill="x")
    
    def export_to_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ Excel"""
        if not self._prescriptions_data:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        self._show_loading_spinner()
        
        try:   
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ reports (–Ω–∞ 2 —É—Ä–æ–≤–Ω—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)
            current_dir = pathlib.Path(__file__).parent
            reports_dir = current_dir.parent.parent.parent / "reports"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            os.makedirs(reports_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "–†–µ—Ü–µ–ø—Ç—ã"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            headers = ["ID", "–î–∞—Ç–∞", "–í—Ä–∞—á", "–ü–∞—Ü–∏–µ–Ω—Ç", "–ü—Ä–µ–ø–∞—Ä–∞—Ç"]
            ws.append(headers)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
            for pres in self._prescriptions_data:
                ws.append([
                    pres["id"],
                    pres["date"].strftime("%d.%m.%Y"),
                    pres["doctor"],
                    pres["patient"],
                    pres["medicine"]
                ])
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É reports
            filename = f"—Ä–µ—Ü–µ–ø—Ç—ã_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"
            filepath = reports_dir / filename
            wb.save(filepath)
            
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö", 
                f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª:\n{filepath}"
            )
            
        except ImportError:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞", 
                "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å openpyxl\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install openpyxl"
            )
        except Exception as e:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞", 
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}"
            )
        finally:
            self.refresh_prescriptions_list()

    def _create_prescriptions_list(self):
        header_frame = ctk.CTkFrame(self, fg_color="transparent")
        header_frame.pack(pady=(0, 10), fill="x", padx=20)
        
        ctk.CTkLabel(
            header_frame,
            text="–°–ü–ò–°–û–ö –†–ï–¶–ï–ü–¢–û–í",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="#7a7a7a"
        ).pack(side="left")

        self.scrollable_frame = ctk.CTkScrollableFrame(
            self, 
            width=800, 
            height=400, 
            corner_radius=14, 
            fg_color="#252525",
            border_width=1,
            border_color="#333333"
        )
        self.scrollable_frame.pack(padx=20, pady=(0, 20), fill="both", expand=True)

    def parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É ¬´–¥–¥.–º–º.–ì–ì–ì–ì¬ª –≤ datetime. –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None."""
        try:
            return datetime.strptime(date_str, "%d.%m.%Y")
        except Exception:
            return None

    def reset_filter(self):
        """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ (–æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è) –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞."""
        self.entry_filter_date.delete(0, "end")
        self.refresh_prescriptions_list()

    def load_medicines(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–∑ API"""
        try:
            response = api.get(endpoint='medicine')
            
            if response and isinstance(response, list):
                self._medicines_list = [med["name"] for med in response]
                self._medicines_dict = {med["name"]: med["id"] for med in response}
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤: {str(e)}")

    def refresh_prescriptions_list(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        if self.loading:
            return
            
        self.loading = True
        self._show_loading_spinner()
        
        try:
            response = api.get(endpoint='order/recipe/date')
            
            if response and isinstance(response, list):
                processed = []
                for pres in response:
                    try:
                        processed.append({
                            "id": pres["id"],
                            "doctor": pres["doctor_name"],
                            "patient": pres["client_name"],
                            "medicine": pres["medicine_name"],
                            "date": datetime.strptime(pres["issue_date"], "%Y-%m-%d")
                        })
                    except Exception:
                        continue
                
                self._prescriptions_data = sorted(
                    processed, 
                    key=lambda p: p["date"], 
                    reverse=True
                )
                self._update_prescriptions_list()
            else:
                self._handle_no_data()
        except Exception as e:
            self._handle_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {str(e)}")
        finally:
            self.loading = False

    def _update_prescriptions_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self._clear_orders_list()
        
        self.scrollable_frame._parent_canvas.yview_moveto(0)

        if not self._prescriptions_data:
            self._show_no_orders_message()
            return

        for pres in self._prescriptions_data:
            self._create_prescription_card(pres)

        self._hide_loading_spinner()

    def _clear_orders_list(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

    def _show_loading_spinner(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self._clear_orders_list()
        spinner_frame = ctk.CTkFrame(
            self.scrollable_frame,
            fg_color="#252525",
            corner_radius=12,
            height=100
        )
        spinner_frame.pack(fill="x", padx=10, pady=10)
        
        self.loading_spinner = ctk.CTkLabel(
            spinner_frame,
            text="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#7a7a7a"
        )
        self.loading_spinner.place(relx=0.5, rely=0.5, anchor="center")

    def _hide_loading_spinner(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        if hasattr(self, 'loading_spinner') and self.loading_spinner:
            self.loading_spinner.destroy()

    def _show_no_orders_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        empty_frame = ctk.CTkFrame(
            self.scrollable_frame,
            fg_color="#252525",
            corner_radius=12,
            height=100
        )
        empty_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(
            empty_frame,
            text="üì≠ –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            font=ctk.CTkFont(size=16),
            text_color="#777777"
        ).place(relx=0.5, rely=0.5, anchor="center")

    def _handle_no_data(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        self._prescriptions_data = []
        self._update_prescriptions_list()
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö")

    def _handle_error(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
        self._prescriptions_data = []
        self._update_prescriptions_list()
        messagebox.showerror("–û—à–∏–±–∫–∞", message)

    def _create_prescription_card(self, prescription):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ—Ü–µ–ø—Ç–∞."""
        container = ctk.CTkFrame(
            self.scrollable_frame,
            fg_color="#333333",
            corner_radius=12,
            border_width=1,
            border_color="#444444"
        )
        container.pack(fill="x", padx=10, pady=8)
        
        top_frame = ctk.CTkFrame(container, fg_color="transparent")
        top_frame.pack(fill="x", padx=10, pady=(10, 0))
        
        ctk.CTkLabel(
            top_frame,
            text=f"üìã –†–µ—Ü–µ–ø—Ç #{prescription['id']}",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#4d8af0",
            anchor="w"
        ).pack(side="left", fill="x", expand=True)
        
        ctk.CTkLabel(
            top_frame,
            text=f"üìÖ {prescription['date'].strftime('%d.%m.%Y')}",
            font=ctk.CTkFont(size=13),
            text_color="#aaaaaa",
            anchor="e"
        ).pack(side="right")
        
        info_frame = ctk.CTkFrame(container, fg_color="transparent")
        info_frame.pack(fill="x", padx=10, pady=(5, 0))

        ctk.CTkLabel(
            info_frame,
            text=f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {prescription['doctor']}",
            font=ctk.CTkFont(size=13),
            text_color="#cccccc",
            anchor="w"
        ).pack(fill="x", pady=2)
        
        ctk.CTkLabel(
            info_frame,
            text=f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {prescription['patient']}",
            font=ctk.CTkFont(size=13),
            text_color="#cccccc",
            anchor="w"
        ).pack(fill="x", pady=2)
        
        ctk.CTkLabel(
            info_frame,
            text=f"üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç: {prescription['medicine']}",
            font=ctk.CTkFont(size=13, weight="bold"),
            text_color="#4d8af0",
            anchor="w"
        ).pack(fill="x", pady=2)
        
        btn_frame = ctk.CTkFrame(container, fg_color="transparent")
        btn_frame.pack(fill="x", padx=10, pady=(5, 10))
        
        ctk.CTkButton(
            btn_frame,
            text="–£–¥–∞–ª–∏—Ç—å",
            width=100,
            height=30,
            fg_color="#d9534f",
            hover_color="#c9302c",
            text_color="white",
            font=ctk.CTkFont(size=13, weight="bold"),
            corner_radius=8,
            command=lambda p=prescription: self.delete_prescription(p)
        ).pack(side="right")

    def delete_prescription(self, prescription):
        """–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        answer = messagebox.askyesno(
            "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞",
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç ID={prescription['id']}?"
        )
        if not answer:
            return

        self._show_loading_spinner()
        
        try:
            response = api.delete(endpoint=f'order/recipe/{prescription["id"]}')
            if response:
                self._handle_delete_success()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        finally:
            self.scrollable_frame._parent_canvas.yview_moveto(0)
            self.refresh_prescriptions_list()

    def _handle_delete_success(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞"""
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")

    def open_add_modal(self):
        """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
        if not self._medicines_list:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return

        modal = ctk.CTkToplevel(self)
        modal.title("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç")
        modal.geometry("500x750")
        modal.configure(fg_color="#1a1a1a")
        modal.grab_set()
        modal.transient(self)
        modal.resizable(False, False)

        header_frame = ctk.CTkFrame(modal, fg_color="transparent")
        header_frame.pack(pady=(20, 15), fill="x", padx=20)
        
        ctk.CTkLabel(
            header_frame,
            text="‚ñå",
            font=ctk.CTkFont(size=28),
            text_color="#4d8af0"
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkLabel(
            header_frame,
            text="–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç",
            font=ctk.CTkFont(size=22, weight="bold"),
            text_color="#ffffff"
        ).pack(side="left")
        
        ctk.CTkLabel(
            header_frame,
            text="‚ñê",
            font=ctk.CTkFont(size=28),
            text_color="#4d8af0"
        ).pack(side="right")

        form_frame = ctk.CTkFrame(modal, fg_color="transparent")
        form_frame.pack(pady=(0, 20), padx=20, fill="both", expand=True)
        
        ctk.CTkLabel(
            form_frame,
            text="–§–ò–û –≤—Ä–∞—á–∞:",
            font=ctk.CTkFont(size=14),
            text_color="#d6d6d6"
        ).pack(anchor="w", pady=(10, 2))
        
        entry_doctor = ctk.CTkEntry(
            form_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤—Ä–∞—á–∞",
            height=40,
            fg_color="#333333",
            border_color="#444444",
            corner_radius=8,
            font=ctk.CTkFont(size=14)
        )
        entry_doctor.pack(fill="x", pady=(0, 10))

        ctk.CTkLabel(
            form_frame,
            text="–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤—Ä–∞—á–∞:",
            font=ctk.CTkFont(size=14),
            text_color="#d6d6d6"
        ).pack(anchor="w", pady=(10, 2))
        
        entry_licence = ctk.CTkEntry(
            form_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤—Ä–∞—á–∞",
            height=40,
            fg_color="#333333",
            border_color="#444444",
            corner_radius=8,
            font=ctk.CTkFont(size=14)
        )
        entry_licence.pack(fill="x", pady=(0, 10))

        ctk.CTkLabel(
            form_frame,
            text="–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:",
            font=ctk.CTkFont(size=14),
            text_color="#d6d6d6"
        ).pack(anchor="w", pady=(10, 2))
        
        entry_patient = ctk.CTkEntry(
            form_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            height=40,
            fg_color="#333333",
            border_color="#444444",
            corner_radius=8,
            font=ctk.CTkFont(size=14)
        )
        entry_patient.pack(fill="x", pady=(0, 10))

        ctk.CTkLabel(
            form_frame,
            text="–î–∞—Ç–∞ –≤—ã–ø–∏—Å–∫–∏ (–¥–¥.–º–º.–ì–ì–ì–ì):",
            font=ctk.CTkFont(size=14),
            text_color="#d6d6d6"
        ).pack(anchor="w", pady=(10, 2))
        
        entry_date = ctk.CTkEntry(
            form_frame,
            placeholder_text="–¥–¥.–º–º.–ì–ì–ì–ì",
            height=40,
            fg_color="#333333",
            border_color="#444444",
            corner_radius=8,
            font=ctk.CTkFont(size=14)
        )
        entry_date.pack(fill="x", pady=(0, 10))

        ctk.CTkLabel(
            form_frame,
            text="–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç:",
            font=ctk.CTkFont(size=14),
            text_color="#d6d6d6"
        ).pack(anchor="w", pady=(10, 2))
        
        combo_med = ctk.CTkComboBox(
            form_frame,
            values=sorted(self._medicines_list),
            state="readonly",
            height=40,
            dropdown_fg_color="#333333",
            button_color="#555555",
            corner_radius=8,
            font=ctk.CTkFont(size=14)
        )
        combo_med.pack(fill="x", pady=(0, 20))
        combo_med.set(self._medicines_list[0] if self._medicines_list else "")

        btn_frame = ctk.CTkFrame(modal, fg_color="transparent")
        btn_frame.pack(pady=(0, 20), padx=20, fill="x")
        
        def on_confirm():
            doctor = entry_doctor.get().strip()
            license = entry_licence.get().strip()
            patient = entry_patient.get().strip()
            date_text = entry_date.get().strip()
            medicine = combo_med.get().strip()

            if not all([doctor, license, patient, date_text, medicine]):
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
                return

            try:
                dt = datetime.strptime(date_text, "%d.%m.%Y")
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–ì–ì–ì–ì")
                return

            try:
                license_number = int(license)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return

            medicine_id = self._medicines_dict.get(medicine)
            if not medicine_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            prescription_data = {
                "doctor_name": doctor,
                "license_number": license_number, 
                "client_name": patient,
                "medicine_id": medicine_id,
                "issue_date": dt.date().isoformat()
            }

            modal.destroy()
            self._show_loading_spinner()
            
            try:
                headers = {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
                
                response = api.post(
                    endpoint='order/recipe', 
                    json_data=prescription_data,
                    headers=headers
                )
                
                if response and response.get("id"):
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                    self.refresh_prescriptions_list()
                else:
                    error_msg = response.get("detail", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")
                    messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}")
            finally:
                self._hide_loading_spinner()

        btn_confirm = ctk.CTkButton(
            btn_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å",
            height=40,
            fg_color="#2e8b57",
            hover_color="#3cb371",
            text_color="white",
            font=ctk.CTkFont(size=14, weight="bold"),
            corner_radius=8,
            command=on_confirm
        )
        btn_confirm.pack(side="left", fill="x", expand=True, padx=(0, 10))

        btn_cancel = ctk.CTkButton(
            btn_frame,
            text="–û—Ç–º–µ–Ω–∞",
            height=40,
            fg_color="#555555",
            hover_color="#666666",
            text_color="white",
            font=ctk.CTkFont(size=14),
            corner_radius=8,
            command=modal.destroy
        )
        btn_cancel.pack(side="right", fill="x", expand=True)

        modal.update_idletasks()
        width = modal.winfo_width()
        height = modal.winfo_height()
        x = (modal.winfo_screenwidth() // 2) - (width // 2)
        y = (modal.winfo_screenheight() // 2) - (height // 2)
        modal.geometry(f"{width}x{height}+{x}+{y}")